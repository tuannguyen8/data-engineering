# -*- coding: utf-8 -*-
"""weather.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rixwmv6KV7dh8cMhCP_mOyF9n-9oqoXd
"""

import requests
import json
from datetime import datetime

# OpenWeather API key
api_key = "e5f9b978efabe60a84d1bb4ec5d58eb1"

# Base URLs
current_weather_url = "http://api.openweathermap.org/data/2.5/weather?"
forecast_url = "http://api.openweathermap.org/data/2.5/forecast?"

# City and country code
city_name = "Portland, US"

# Build request URLs
current_url = f"{current_weather_url}appid={api_key}&q={city_name}&units=metric"
forecast_url = f"{forecast_url}appid={api_key}&q={city_name}&units=metric"

# Get current weather data
current_response = requests.get(current_url)
current_data = current_response.json()
# print(current_data)

if current_data.get("cod") == 200:  # Ensure valid response
    # print(current_data)
    # print(current_data["weather"])
    # print (current_data["main"])
    weather_now = current_data["weather"][0]["description"]
    temperature_now = current_data["main"]["temp"]

    # Check if it's raining now
    is_raining_now = "rain" in weather_now.lower()

    print(f"\nCurrent Weather in Portland, OR:")
    print(f"- Temperature: {temperature_now}°C")
    print(f"- Condition: {weather_now}")
    print(f"Is it raining now? {'Yes' if is_raining_now else 'No'}\n")

else:
    print("Error: City not found in current weather data.")

# Get forecast data
forecast_response = requests.get(forecast_url)
forecast_data = forecast_response.json()
# print(forecast_data)

if forecast_data.get("cod") == "200":
    # print(forecast_data)
    print("\nWeather Forecast for the Next 3 Days in Portland, OR:")

    # Process forecast data
    daily_forecast = {}
    is_raining_forecast = False

    for item in forecast_data["list"]:
        # print(item)
        # Convert timestamp to date
        date = datetime.utcfromtimestamp(item["dt"]).strftime("%Y-%m-%d")

        # Extract weather info
        temp = item["main"]["temp"]
        condition = item["weather"][0]["description"]

        # Store only one record per day (morning data preferred)
        if date not in daily_forecast:
            daily_forecast[date] = {"temp": temp, "condition": condition}

        # Check if rain appears in the forecast
        if "rain" in condition.lower():
            is_raining_forecast = True

        # Stop when we have 3 days
        if len(daily_forecast) >= 3:
            break

    # Print forecast
    for date, info in daily_forecast.items():
        print(f"- {date}: {info['temp']}°C, {info['condition']}")

    print(f"\nIs it forecasted to rain within 3 days? {'Yes' if is_raining_forecast else 'No'}")

else:
    print("Error: City not found in forecast data.")